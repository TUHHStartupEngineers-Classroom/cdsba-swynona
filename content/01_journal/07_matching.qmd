---
title: "Matching and Subclassification"
---

::: callout-note
Assignment VII on Matching and Subclassification - final submission
:::


# Task 1
Check relationships between variables and draw a DAG
```{r}

install.packages('MatchIt')
library(MatchIt)
library(ggdag)
library(dplyr)
library(ggplot2)

#Load Data
data <- readRDS("C:/Users/sophi/OneDrive/Desktop/Causal Data Science for Business Analytics 2023/gitclone/cdsba-swynona/assets/Causal_Data_Science_Data/membership.rds")

# Compute correlations
correlations <- cor(data[, c("age", "sex", "pre_avg_purch", "card", "avg_purch")])

# Print correlations
print(correlations)

# Define the DAG
dag <- dagify(avg_purch ~ card + age + sex + pre_avg_purch,
              card ~ age + sex + pre_avg_purch,
              exposure = "card",
              outcome = "avg_purch")

# Plot the DAG
ggdag(dag) + theme_dag()
```

# Task 2
Compute a naive estimate of the average treatment effect.
```{r}

#Native Estimate
treated <- data[data$card == 1,]
control <- data[data$card == 0,]
ATE_naive <- mean(treated$avg_purch) - mean(control$avg_purch)
print(paste("Naive ATE: ", ATE_naive))

```

# Task 3
Precise estimations with
## Exact Matching
```{r}
#(Coarsened)Exact Matching
match_exact <- matchit(card ~ age + sex + pre_avg_purch, data = data, method = "cem")
matched_data_exact <- match.data(match_exact)
ATE_exact <- with(matched_data_exact, mean(avg_purch[card == 1]) - mean(avg_purch[card == 0]))
print(paste("ATE after Exact Matching: ", ATE_exact))
```
## Nearest Neighbor Matching
```{r}
#Nearest Neighbor Matching
match_nn <- matchit(card ~ age + sex + pre_avg_purch, data = data, method = "nearest")
matched_data_nn <- match.data(match_nn)
ATE_nn <- with(matched_data_nn, mean(avg_purch[card == 1]) - mean(avg_purch[card == 0]))
print(paste("ATE after Nearest-Neighbor Matching: ", ATE_nn))
```
## Inverse Probability Weighting (IPW)
```{r}
#Inverse Probability Weighting (IPW)
# (1) Propensity scores
model_prop <- glm(card ~ age + sex + pre_avg_purch,
                  data = data, # use 'data' instead of 'df'
                  family = binomial(link = "logit"))
summary(model_prop)

# Add propensities to table
data_aug <- data %>% mutate(propensity = predict(model_prop, type = "response")) # use 'data' instead of 'df'

# Extend data by IPW scores
data_ipw <- data_aug %>% mutate(
  ipw = (card/propensity) + ((1-card) / (1-propensity)))

# Look at data with IPW scores
data_ipw %>% 
  select(card, age, sex, pre_avg_purch, propensity, ipw)

# (2) Estimation
model_ipw <- lm(avg_purch ~ card,
                data = data_ipw, # use 'data_ipw' instead of 'df_ipw'
                weights = ipw)
summary(model_ipw)

# Plot histogram of estimated propensities
ggplot(data_aug, aes(x = propensity)) + # use 'data_aug' instead of 'df_aug'
  geom_histogram(alpha = .8, color = "white")

# Run with high weights excluded
model_ipw_trim <- lm(avg_purch ~ card,
                     data = data_ipw %>% filter(propensity %>% between(0.15, 0.85)), # use 'data_ipw' instead of 'df_ipw'
                     weights = ipw)
summary(model_ipw_trim)

```